import {  ScrollView } from 'react-native';
import React, { useState, useEffect } from 'react';
import Map from '../components/Map'
import { Text, View } from '../components/Themed';
import { RootTabScreenProps } from '../types';
import MobileOrderButton from '../components/MobileOrderButton';
import MapOpenButton from '../components/MapOpenButton';
import { database } from '../firebaseConfig';
import { ref, get } from 'firebase/database';
import { styles } from '../styles/HoursScreenStyle';

import { OpenHours } from '../types';

async function readHours(day : string) {
  // Make the query to the Firebase RTDB in the hours section, chosen by day
  const query = ref(database, `hours/${day}`);
  // Provide a default value for hours to be returned if the DB call fails
  let val : OpenHours = {day: 'Day', start_hour: 11, start_minute: '00', end_hour: 8, end_minute: '00'};
  // Make the async call to retrieve data
  val = await get(query).then((snapshot:any) => {
    if (snapshot.exists()) { // If the data exists, return it
      val = snapshot.val();
      // console.log(snapshot.val()); // Log pulled hours to console for debugging
      return val;
    } else {
      // If the data is not there, return the default and print an error to console
      console.log(`No data available @ hours/${day}`);
      return val;
    }
  }).catch((error:any) => {
    // Otherwise raise the error generated by Firebase, return default
    console.error(error);
    return val;
  });
  // Return either the default value or the queried data
  return val
}

export default function HoursScreen({ navigation }: RootTabScreenProps<'Hours'>) {
  // getter/setter for DayHours type which is displayed for every day of the week
  const [dayHours, setDayHours] = useState([{day: 'Day', start_hour: 11, start_minute: '00', end_hour: 8, end_minute: '00'}]);
  // Include a value for checking if the async call has returned or not
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // This makes an async call to the database for every day of the week
    async function fetchDayHours() {
      // Fixed array of every day that has been stored in the database: format `hours/${day}`
      const days: Array<string> = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']
      // Add a mutable array that will store the returns from every database call
      let dayHours: Array<OpenHours> = []
      // For every day in the defined array, pull the data from the database
      for (let day of days) {
        // This is the return (default or successful pull) from the async database function
        const val = await readHours(day)
        // Append the returned value to the return array
        dayHours.push(val)
      }
      // Once successful, set the array of days to the collected values
      setDayHours(dayHours)
      // Then set loading to false to indicate that the async call is finished
      setIsLoading(false)
    }
    // Call the above function
    fetchDayHours()
  }, []);

  if (isLoading) {
    // Provides a default view of empty screen with 'Loading Data...' text for when async call hasn't finished yet
    return <View style={styles.loadingView}><Text style={styles.loadingText}>Loading Data...</Text></View>
  }

  // Here are the chosen latitude/longitude coordinates for Ajian, these could be passed in as an argument
  const latitude : number = 33.21180;
  const longitude : number = -87.56228;

  /*
  Below returns the following components:
  - Scrolling background
  - Address of the restaurant
  - Button for opening address in maps app
  - Display of a map with the location marked
  - Current open hours for the week
  - Button for optional mobile ordering
  */
  return (
    <ScrollView style={styles.scrollContainer}>
      {/* <Map /> */}
      {Map(latitude, longitude)}
      <Text style={[styles.parentText, styles.headerText]}>
        Hours & Location {'\n'} {'\n'}
        <Text style={[styles.parentText, styles.addressText]}>
          1914 University Blvd, {'\n'}
          Tuscaloosa, AL 35401 {'\n'}
          205-331-4542 {'\n'}
        </Text>  
        {MapOpenButton(latitude, longitude, 'Ajian Sushi')}
      </Text>
      
      <View style={[styles.containerParent, styles.dayContainer]}>
        {Hours(dayHours)}
        <View style={styles.mobileButton}>
          <MobileOrderButton />
        </View>
      </View>
    </ScrollView>
  );
}

function Hours(dayHours : Array<OpenHours>) {
  /*
  Below returns 7 components with the following:
  - Day of the week text
  - Hours for that day
  These are all stacked right below each other in a container.
  */
  return (
    <View style={styles.containerParent}>
      {dayHours.map(item => (
        <View key={item.day} style={styles.dayMargin}>
          <Text style={[styles.parentText, styles.dayText]}>{item.day}</Text>
          <Text style={[styles.parentText, styles.hoursText]}>{`${item.start_hour}:${item.start_minute}AM - ${item.end_hour}:${item.end_minute}PM`}</Text>
        </View>
      ))}
    </View>
  );
}



